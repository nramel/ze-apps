<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class App extends ZeCtrl
{

    private $modules = [];

    public function index()
    {
        $this->load->model("Zeapps_usersModel", "user");


        // verifie si la session est active
        if ($this->session->get('token')) {
            $user = $this->user->getUserByToken($this->session->get('token'));
            if ($user) {
                $this->update_token();
                $this->appLoading();
            } else {
                header("location:/");
            }
        } else {
            header("location:/");
        }
    }





    public function update_token() {
        global $global_config ;

        $this->load->model("Zeapps_tokenModel", "token");

        $session_lifetime = 20 ;
        if (isset($global_config["session_lifetime"]) && is_numeric($global_config["session_lifetime"])) {
            $session_lifetime = $global_config["session_lifetime"] ;
        }


        // verifie si la session est active
        if ($this->session->get('token')) {
            $tokens = $this->token->findBy_token($this->session->get('token'));
            if ($tokens && count($tokens) == 1) {
                $tokens[0]->date_expire = date("Y-m-d H:i:s", time() + $session_lifetime * 60) ;

                $this->token->update(array('id'=>$tokens[0]->id), $tokens[0]);
            }
        }
    }







    private function appLoading()
    {
        $this->loadCache();

        $data = $this->getContext();

        $this->load->view("app", $data);
    }


    private function loadCache()
    {
        if(!is_file(FCPATH . 'assets/cache/js/main.js') || ENVIRONMENT != 'production') {
            $this->generateMainJs();
        }

        if(!is_file(FCPATH . 'assets/cache/css/global.css') || ENVIRONMENT != 'production') {
            $this->generateGlobalCss();
        }

        if(!is_file(FCPATH . 'assets/cache/js/global.js') || ENVIRONMENT != 'production') {
            $this->generateGlobalJs();
        }

        $this->copyImages();

        return true;
    }

    private function getContext(){
        $data = array();

        $this->loadSpaces();

        $this->loadMenues();

        $data["menuEssential"] = $this->createEssentialMenu();

        $data["menuLeft"] = $this->createLeftMenu();

        $ret = $this->createHeaderMenu();

        $data['menuTopCol1'] = $ret['menuTopCol1'];
        $data['menuTopCol2'] = $ret['menuTopCol2'];


        $data["form"] = true ;

        return $data;
    }


    private function generateMainJs(){

        /*************** génération du fichier main.js dans le cache *************/
        $mainjs = "/*************\n" ;
        $mainjs .= "*** do not edit this files ***\n" ;
        $mainjs .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n" ;
        $mainjs .= "*************/\n" ;


        /*************** Compiling all the languages files in a global JS object *************/

        $mainjs .= "i8n = ";

        $i8n = [];

        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderLangs = $folderModule . "/language" ;

                    if (is_dir($folderLangs)) {
                        $folderLangs .= "/" ;
                        if($folderLang = opendir($folderLangs)) {
                            while (false !== ($folderItemLang = readdir($folderLang))) {
                                $fileJS = $folderLangs . $folderItemLang;
                                if (is_file($fileJS) && $folderItemLang != '.' && $folderItemLang != '..' && $this->str_ends_with($folderItemLang, ".lang")) {
                                    $lang = str_replace('.lang', '', $folderItemLang);
                                    if(!isset($i8n[$lang]) || !is_array($i8n[$lang]))
                                        $i8n[$lang] = [];
                                    if(!isset($i8n[$lang][$folderItem]) || !is_array($i8n[$lang][$folderItem]))
                                        $i8n[$lang][$folderItem] = [];
                                    $filecontent = preg_replace(array('/\t/', '/\r/'), '', file_get_contents($fileJS));

                                    $arr = preg_split('/\n/', $filecontent);

                                    for($index=0; $index < sizeof($arr); $index++){
                                        if(sizeof($arr[$index]) > 0)
                                            $trad = explode('=>', $arr[$index], 2);
                                        if(is_array($trad) && sizeof($trad) == 2)
                                            $i8n[$lang][$folderItem][strtolower(trim($trad[0]))] = trim($trad[1]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                        $folderLangs = $folderModule . "/language";

                        if (is_dir($folderLangs)) {
                            $folderLangs .= "/";
                            if ($folderLang = opendir($folderLangs)) {
                                while (false !== ($folderItemLang = readdir($folderLang))) {
                                    $fileJS = $folderLangs . $folderItemLang;
                                    if (is_file($fileJS) && $folderItemLang != '.' && $folderItemLang != '..' && $this->str_ends_with($folderItemLang, ".lang")) {
                                        $lang = str_replace('.lang', '', $folderItemLang);
                                        if (!isset($i8n[$lang]) || !is_array($i8n[$lang]))
                                            $i8n[$lang] = [];
                                        if (!isset($i8n[$lang][$folderItem]) || !is_array($i8n[$lang][$folderItem]))
                                            $i8n[$lang][$folderItem] = [];
                                        $filecontent = preg_replace(array('/\t/', '/\r/'), '', file_get_contents($fileJS));

                                        $arr = preg_split('/\n/', $filecontent);

                                        for ($index = 0; $index < sizeof($arr); $index++) {
                                            if (sizeof($arr[$index]) > 0)
                                                $trad = explode('=>', $arr[$index], 2);
                                            if (is_array($trad) && sizeof($trad) == 2)
                                                $i8n[$lang][$folderItem][strtolower(trim($trad[0]))] = trim($trad[1]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $mainjs .= json_encode($i8n);
        $mainjs .= "\n";


        /*************** END : compilation of languages files *************/

        if (is_file(BASEPATH . "angularjs/main.js")) { // We start with the root of our AngularJS application
            $mainjs .= file_get_contents(BASEPATH . "angularjs/main.js") ;
            $mainjs .= "\n";
        }


        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            $folderAngularJs = $folderApp . "/angularjs" ;

            $mainjs .= $this->getContentFolder($folderAngularJs, 'js');
        }



        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule)) {
                        $folderAngularJs = $folderModule . "/angularjs";

                        $mainjs .= $this->getContentFolder($folderAngularJs, 'js');

                    }
                }
            }
        }


        // ecriture du fichier javascript
        $this->recursive_mkdir(FCPATH . "assets/cache/js/") ;
        file_put_contents(FCPATH . "assets/cache/js/main.js", $mainjs);
        /*************** END : génération du fichier main.js dans le cache *************/

        return true;
    }

    private function generateGlobalCss(){

        $globalCss = "/************\n" ;
        $globalCss .= "*** do not edit this files ***\n" ;
        $globalCss .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n" ;
        $globalCss .= "*************/\n" ;

        /*************** copie des fichiers css *************/
        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            $folderCss = $folderApp . "/assets/css" ;

            $globalCss .= $this->minifyCss($this->getContentFolder($folderCss, 'css'));
        }



        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                        $folderCss = $folderModule . "/assets/css";

                        $globalCss .= $this->minifyCss($this->getContentFolder($folderCss, 'css'));

                    }
                }
            }
        }
        /*************** END : copie des fichiers css *************/


        $this->recursive_mkdir(FCPATH . "assets/cache/css/") ;
        file_put_contents(FCPATH . "assets/cache/css/global.css", $globalCss);

        return true;
    }

    private function generateGlobalJs(){

        $globalJs = "/************\n" ;
        $globalJs .= "*** do not edit this files ***\n" ;
        $globalJs .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n" ;
        $globalJs .= "*************/\n" ;

        /*************** copie des fichiers css *************/
        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            $folderCss = $folderApp . "/assets/js" ;

            $globalJs .= $this->getContentFolder($folderCss, 'js');
        }



        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                        $folderCss = $folderModule . "/assets/js";

                        $globalJs .= $this->getContentFolder($folderCss, 'js');

                    }
                }
            }
        }
        /*************** END : copie des fichiers css *************/


        $this->recursive_mkdir(FCPATH . "assets/cache/js/") ;
        file_put_contents(FCPATH . "assets/cache/js/global.js", $globalJs);

        return true;
    }

    private function copyImages(){
        /*************** copie des fichiers images *************/
        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderImagesFile = $folderModule . "/assets/images" ;
                    if (is_dir($folderImagesFile)) {
                        $folderImagesFile .= "/" ;
                        if($folderJS = opendir($folderImagesFile)) {
                            while (false !== ($folderItemImage = readdir($folderJS))) {
                                $fileJS = $folderImagesFile . $folderItemImage;
                                if (is_file($fileJS) && $folderItemImage != '.'
                                    && $folderItemImage != '..'
                                    && (
                                        $this->str_ends_with($folderItemImage, ".png")
                                        || $this->str_ends_with($folderItemImage, ".jpg")
                                        || $this->str_ends_with($folderItemImage, ".gif")
                                    )) {
                                    // creation du dossier d'accueil
                                    $this->recursive_mkdir(FCPATH . "assets/cache/images/" . $folderItem) ;

                                    // copie du fichier
                                    copy($fileJS, FCPATH . "assets/cache/images/" . $folderItem . "/" . $folderItemImage);
                                }
                            }
                        }
                    }
                }
            }
        }

        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                        $folderImagesFile = $folderModule . "/assets/images";
                        if (is_dir($folderImagesFile)) {
                            $folderImagesFile .= "/";
                            if ($folderJS = opendir($folderImagesFile)) {
                                while (false !== ($folderItemImage = readdir($folderJS))) {
                                    $fileJS = $folderImagesFile . $folderItemImage;
                                    if (is_file($fileJS) && $folderItemImage != '.'
                                        && $folderItemImage != '..'
                                        && (
                                            $this->str_ends_with($folderItemImage, ".png")
                                            || $this->str_ends_with($folderItemImage, ".jpg")
                                            || $this->str_ends_with($folderItemImage, ".gif")
                                        )
                                    ) {
                                        // creation du dossier d'accueil
                                        $this->recursive_mkdir(FCPATH . "assets/cache/images/" . $folderItem);

                                        // copie du fichier
                                        copy($fileJS, FCPATH . "assets/cache/images/" . $folderItem . "/" . $folderItemImage);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : copie des fichiers images *************/
    }

    private function getContentFolder($folder, $ext) {
        $valRetour = "";

        if (is_dir($folder)) {
            $folder .= "/" ;
            if($folderOpen = opendir($folder)) {
                while (false !== ($folderItem = readdir($folderOpen))) {
                    $file = $folder . $folderItem;
                    if (is_file($file) && $folderItem != '.' && $folderItem != '..' && $this->str_ends_with($folderItem, ".".$ext) && $folderItem != 'main.js') {
                        $valRetour .= file_get_contents($file) ;
                        $valRetour .= "\n";
                    } elseif (is_dir($file) && $folderItem != '.' && $folderItem != '..') {
                        $valRetour .= $this->getContentFolder($file, $ext);
                    }
                }
            }
        }

        return $valRetour ;
    }


    private function loadSpaces(){
        /********** charge tous les espaces **********/
        $space = array();
        $folderSpace  = FCPATH . "space/" ;
        // charge tous les fichiers de conf des menus
        if($folder = opendir($folderSpace)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $fileSpace = $folderSpace . $folderItem ;
                if(is_file($fileSpace) && $folderItem != '.' && $folderItem != '..') {
                    require_once $fileSpace ;
                }
            }
        }
        /********** END : charge tous les espaces **********/
    }

    private function loadMenues(){
        /************ charge tous les menus de config pour les menus ***********/
        $menuLeft = array();
        $menuHeader = array();
        $menuEssential = array();


        if($this->modules && is_array($this->modules)) {
            $folderApp = MODULEPATH;
            // charge tous les fichiers de conf des menus
            if ($folder = opendir($folderApp)) {
                for ($i = 0; $i < sizeof($this->modules); $i++) {
                    $folderModule = $folderApp . $this->modules[$i]->module_id;
                    if (is_dir($folderModule)) {
                        if (is_file($folderModule . '/config/menu.php')) {
                            require_once $folderModule . '/config/menu.php';
                        }
                    }
                }
            }
        }

        $folderApp = BASEPATH ;
        // charge tous les fichiers de conf des menus
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    if (is_file($folderModule . '/config/menu.php')) {
                        require_once $folderModule . '/config/menu.php' ;
                    }
                }
            }
        }
        /************ END : charge tous les menus de config pour les menus ***********/
    }

    private function createEssentialMenu(){

        /*************** creation du menu essential *************/
        // charges les différents menus
        $data = array();

        // calcul le numero ordre le plus élevé
        $maxOrder = -1 ;
        if(isset($menuEssential)) {
            foreach ($menuEssential as $menuItem) {
                if (isset($menuItem["order"])) {
                    if ($menuItem["order"] > $maxOrder) {
                        $maxOrder = $menuItem["order"];
                    }
                }
            }
        }

        if ($maxOrder >= 0) {
            for($i_element_menu = 0 ; $i_element_menu <= $maxOrder ; $i_element_menu++) {
                foreach ($menuEssential as $menuItem) {
                    if (isset($menuItem["order"])) {
                        if ($menuItem["order"] == $i_element_menu) {
                            $data[] = $menuItem;
                        }
                    }
                }
            }
        }
        /*************** END : creation du menu gauche *************/

        return $data;
    }

    private function createLeftMenu(){
        /*************** creation du menu gauche *************/
        // charges les différents menus
        $data = array();
        if(isset($space)) {
            foreach ($space as $space_item) {
                $dataMenu = array();
                $dataMenu["info"] = $space_item;
                $dataMenu["item"] = array();

                // calcul le numero ordre le plus élevé
                $maxOrder = -1;
                if(isset($menuLeft)) {
                    foreach ($menuLeft as $menuLeftItem) {
                        if (isset($menuLeftItem["space"]) && isset($menuLeftItem["order"])) {
                            if ($menuLeftItem["space"] == $space_item["id"] && $menuLeftItem["order"] > $maxOrder) {
                                $maxOrder = $menuLeftItem["order"];
                            }
                        }
                    }
                }

                if ($maxOrder >= 0) {
                    for ($i = 0; $i <= $maxOrder; $i++) {
                        foreach ($menuLeft as $menuLeftItem) {
                            if (isset($menuLeftItem["space"]) && isset($menuLeftItem["order"])) {
                                if ($menuLeftItem["space"] == $space_item["id"] && $menuLeftItem["order"] == $i) {
                                    $dataMenu["item"][] = $menuLeftItem;
                                }
                            }
                        }
                    }
                }

                $data[] = $dataMenu;
            }
        }
        /*************** END : creation du menu gauche *************/

        return $data;
    }

    private function createHeaderMenu(){
        /*************** creation du menu Header *************/

        $data = array();

        $data["menuTopCol1"] = array();
        $data["menuTopCol2"] = array();

        for ($col = 1 ; $col <= 2 ; $col++) {

            // calcul le numero ordre le plus élevé
            $maxOrderCol = -1;
            if(isset($space)) {
                foreach ($space as $space_item) {
                    if (isset($space_item["menu-header"]["col"]) && isset($space_item["menu-header"]["order"])) {
                        if ($space_item["menu-header"]["col"] == $col && $space_item["menu-header"]["order"] > $maxOrderCol) {
                            $maxOrderCol = $space_item["menu-header"]["order"];
                        }
                    }
                }
            }

            if ($maxOrderCol >= 0) {
                for ($i_order_space = 0; $i_order_space <= $maxOrderCol; $i_order_space++) {
                    foreach ($space as $space_item) {
                        if (isset($space_item["menu-header"]["col"]) && isset($space_item["menu-header"]["order"])) {
                            if ($i_order_space == $space_item["menu-header"]["order"] && $space_item["menu-header"]["col"] == $col) {


                                $dataMenu = array();
                                $dataMenu["info"] = $space_item;
                                $dataMenu["item"] = array();

                                // calcul le numero ordre le plus élevé
                                $maxOrder = -1;
                                if(isset($menuHeader)) {
                                    foreach ($menuHeader as $menuHeaderItem) {
                                        if (isset($menuHeaderItem["space"]) && isset($menuHeaderItem["order"])) {
                                            if ($menuHeaderItem["space"] == $space_item["id"] && $menuHeaderItem["order"] > $maxOrder) {
                                                $maxOrder = $menuHeaderItem["order"];
                                            }
                                        }
                                    }
                                }

                                if ($maxOrder >= 0) {
                                    for ($i = 0; $i <= $maxOrder; $i++) {
                                        foreach ($menuHeader as $menuHeaderItem) {
                                            if (isset($menuHeaderItem["space"]) && isset($menuHeaderItem["order"])) {
                                                if ($menuHeaderItem["space"] == $space_item["id"] && $menuHeaderItem["order"] == $i) {
                                                    $dataMenu["item"][] = $menuHeaderItem;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (count($dataMenu["item"]) > 0) {
                                    if ($col == 1) {
                                        $data["menuTopCol1"][] = $dataMenu;
                                    } elseif ($col == 2) {
                                        $data["menuTopCol2"][] = $dataMenu;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : creation du menu Header *************/

        return $data;
    }

    private function minifyCss($css){
        // Remove comments
        $css = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css);

        // Remove space after colons
        $css = str_replace(array(': ', ' :', ' {', '{ ', ' }', '} '), array(':', ':', '{', '{', '}', '}'), $css);

        // Remove whitespace
        $css = str_replace(array("\r\n", "\r", "\n", "\t", '  ', '    ', '    '), '', $css);

        return $css;
    }

    private function str_ends_with($haystack, $needle)
    {
        return strrpos($haystack, $needle) + strlen($needle) === strlen($haystack);
    }

    private function recursive_mkdir($dirName)
    {
        if (!is_dir($dirName)) {
            mkdir($dirName, 0777, true);
        }
    }
}


?>
