<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class App extends ZeCtrl {



    public function index() {
        $data = $this->clearCache() ;
        $this->load->view("app", $data) ;
    }







    private function clearCache() {
        $data = array() ;

        // TODO : supprimer les contenus du dossier cache

        /*************** génération du fichier main.js dans le cache *************/
        $mainjs = "/*************\n" ;
        $mainjs .= "*** do not edit this files ***\n" ;
        $mainjs .= "*** Cache date : " . date("Y-m-d H:i:s") . " ***\n" ;
        $mainjs .= "*************/\n" ;





        /*************** Compiling all the languages files in a global JS object *************/
        $mainjs .= "i8n = ";

        $i8n = [];

        $folderLangs = BASEPATH . "/language" ;
        $folderItem = "zeapps" ;
        if (is_dir($folderLangs)) {
            $folderLangs .= "/" ;
            if($folderLang = opendir($folderLangs)) {
                while (false !== ($folderItemLang = readdir($folderLang))) {
                    $fileJS = $folderLangs . $folderItemLang;
                    if (is_file($fileJS) && $folderItemLang != '.' && $folderItemLang != '..' && $this->str_ends_with($folderItemLang, ".lang")) {
                        $lang = str_replace('.lang', '', $folderItemLang);
                        if(!isset($i8n[$lang]) || !is_array($i8n[$lang]))
                        $i8n[$lang] = [];
                        if(!isset($i8n[$lang][$folderItem]) || !is_array($i8n[$lang][$folderItem]))
                        $i8n[$lang][$folderItem] = [];
                        $filecontent = preg_replace(array('/\t/', '/\r/'), '', file_get_contents($fileJS));

                        $arr = preg_split('/\n/', $filecontent);

                        for($index=0; $index < sizeof($arr); $index++){
                            if(sizeof($arr[$index]) > 0)
                            $trad = explode('=>', $arr[$index], 2);
                            if(is_array($trad) && sizeof($trad) == 2)
                            $i8n[$lang][$folderItem][strtolower(trim($trad[0]))] = trim($trad[1]);
                        }
                    }
                }
            }
        }

        $folderApp = MODULEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderLangs = $folderModule . "/language" ;

                    if (is_dir($folderLangs)) {
                        $folderLangs .= "/" ;
                        if($folderLang = opendir($folderLangs)) {
                            while (false !== ($folderItemLang = readdir($folderLang))) {
                                $fileJS = $folderLangs . $folderItemLang;
                                if (is_file($fileJS) && $folderItemLang != '.' && $folderItemLang != '..' && $this->str_ends_with($folderItemLang, ".lang")) {
                                    $lang = str_replace('.lang', '', $folderItemLang);
                                    if(!isset($i8n[$lang]) || !is_array($i8n[$lang]))
                                    $i8n[$lang] = [];
                                    if(!isset($i8n[$lang][$folderItem]) || !is_array($i8n[$lang][$folderItem]))
                                    $i8n[$lang][$folderItem] = [];
                                    $filecontent = preg_replace(array('/\t/', '/\r/'), '', file_get_contents($fileJS));

                                    $arr = preg_split('/\n/', $filecontent);

                                    for($index=0; $index < sizeof($arr); $index++){
                                        if(sizeof($arr[$index]) > 0)
                                        $trad = explode('=>', $arr[$index], 2);
                                        if(is_array($trad) && sizeof($trad) == 2)
                                        $i8n[$lang][$folderItem][strtolower(trim($trad[0]))] = trim($trad[1]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $mainjs .= json_encode($i8n);
        $mainjs .= "\n";
        /*************** END : compilation of languages files *************/



        // load main.js from /assets/
        if (is_file(FCPATH . "assets/js/main.js")) {
            $mainjs .= file_get_contents(FCPATH . "assets/js/main.js") ;
            $mainjs .= "\n";
        }






        /*************** génération du fichier main.js dans le cache *************/
        $mainjs .= $this->getContentFolderJs(BASEPATH . "/angularjs");




        $folderApp = MODULEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderAngularJs = $folderModule . "/angularjs" ;

                    $mainjs .= $this->getContentFolderJs($folderAngularJs);

                }
            }
        }


        // ecriture du fichier javascript
        $this->recursive_mkdir(FCPATH . "cache/js/") ;
        file_put_contents(FCPATH . "cache/js/main.js", $mainjs);
        /*************** END : génération du fichier main.js dans le cache *************/








        /*************** copie des fichiers jsfile *************/
        $data["js_file"] = array() ;

        //$folderApp = BASEPATH ;
        $folderItem = 'zeapps' ;
        $folderJsFile = BASEPATH . "/assets/js" ;
        if (is_dir($folderJsFile)) {
            $folderJsFile .= "/" ;
            if($folderJS = opendir($folderJsFile)) {
                while (false !== ($folderItemJS = readdir($folderJS))) {
                    $fileJS = $folderJsFile . $folderItemJS;
                    if (is_file($fileJS) && $folderItemJS != '.' && $folderItemJS != '..' && $this->str_ends_with($folderItemJS, ".js")) {
                        // creation du dossier d'accueil
                        $this->recursive_mkdir(FCPATH . "cache/js/" . $folderItem) ;

                        // copie du fichier
                        copy($fileJS, FCPATH . "cache/js/" . $folderItem . "/" . $folderItemJS);

                        $data["js_file"][] = "/cache/js/" . $folderItem . "/" . $folderItemJS ;
                    }
                }
            }
        }


        $folderApp = MODULEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderJsFile = $folderModule . "/assets/js" ;
                    if (is_dir($folderJsFile)) {
                        $folderJsFile .= "/" ;
                        if($folderJS = opendir($folderJsFile)) {
                            while (false !== ($folderItemJS = readdir($folderJS))) {
                                $fileJS = $folderJsFile . $folderItemJS;
                                if (is_file($fileJS) && $folderItemJS != '.' && $folderItemJS != '..' && $this->str_ends_with($folderItemJS, ".js")) {
                                    // creation du dossier d'accueil
                                    $this->recursive_mkdir(FCPATH . "cache/js/" . $folderItem) ;

                                    // copie du fichier
                                    copy($fileJS, FCPATH . "cache/js/" . $folderItem . "/" . $folderItemJS);

                                    $data["js_file"][] = "/cache/js/" . $folderItem . "/" . $folderItemJS ;
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : copie des fichiers jsfile *************/






        /*************** copie des fichiers css *************/
        $data["css_file"] = array() ;

        $folderCssFile = BASEPATH . "/assets/css" ;
        $folderItem = 'zeapps' ;
        if (is_dir($folderCssFile)) {
            $folderCssFile .= "/" ;
            if($folderJS = opendir($folderCssFile)) {
                while (false !== ($folderItemCss = readdir($folderJS))) {
                    $fileCSS = $folderCssFile . $folderItemCss;
                    if (is_file($fileCSS) && $folderItemCss != '.' && $folderItemCss != '..' && $this->str_ends_with($folderItemCss, ".css")) {
                        // creation du dossier d'accueil
                        $this->recursive_mkdir(FCPATH . "cache/css/" . $folderItem) ;

                        // copie du fichier
                        copy($fileCSS, FCPATH . "cache/css/" . $folderItem . "/" . $folderItemCss);

                        $data["css_file"][] = "/cache/css/" . $folderItem . "/" . $folderItemCss ;
                    }
                }
            }
        }

        $folderApp = MODULEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderCssFile = $folderModule . "/assets/css" ;
                    if (is_dir($folderCssFile)) {
                        $folderCssFile .= "/" ;
                        if($folderJS = opendir($folderCssFile)) {
                            while (false !== ($folderItemCss = readdir($folderJS))) {
                                $fileCSS = $folderCssFile . $folderItemCss;
                                if (is_file($fileCSS) && $folderItemCss != '.' && $folderItemCss != '..' && $this->str_ends_with($folderItemCss, ".css")) {
                                    // creation du dossier d'accueil
                                    $this->recursive_mkdir(FCPATH . "cache/css/" . $folderItem) ;

                                    // copie du fichier
                                    copy($fileCSS, FCPATH . "cache/css/" . $folderItem . "/" . $folderItemCss);

                                    $data["css_file"][] = "/cache/css/" . $folderItem . "/" . $folderItemCss ;
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : copie des fichiers css *************/








        /*************** copie des fichiers images *************/
        $folderApp = BASEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderImagesFile = $folderModule . "/assets/images" ;
                    if (is_dir($folderImagesFile)) {
                        $folderImagesFile .= "/" ;
                        if($folderJS = opendir($folderImagesFile)) {
                            while (false !== ($folderItemImage = readdir($folderJS))) {
                                $fileJS = $folderImagesFile . $folderItemImage;
                                if (is_file($fileJS) && $folderItemImage != '.'
                                    && $folderItemImage != '..'
                                    && (
                                        $this->str_ends_with($folderItemImage, ".png")
                                        || $this->str_ends_with($folderItemImage, ".jpg")
                                        || $this->str_ends_with($folderItemImage, ".gif")
                                    )) {
                                    // creation du dossier d'accueil
                                    $this->recursive_mkdir(FCPATH . "cache/images/" . $folderItem) ;

                                    // copie du fichier
                                    copy($fileJS, FCPATH . "cache/images/" . $folderItem . "/" . $folderItemImage);
                                }
                            }
                        }
                    }
                }
            }
        }


        $folderApp = MODULEPATH ;
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    $folderImagesFile = $folderModule . "/assets/images" ;
                    if (is_dir($folderImagesFile)) {
                        $folderImagesFile .= "/" ;
                        if($folderJS = opendir($folderImagesFile)) {
                            while (false !== ($folderItemImage = readdir($folderJS))) {
                                $fileJS = $folderImagesFile . $folderItemImage;
                                if (is_file($fileJS) && $folderItemImage != '.'
                                    && $folderItemImage != '..'
                                    && (
                                        $this->str_ends_with($folderItemImage, ".png")
                                        || $this->str_ends_with($folderItemImage, ".jpg")
                                        || $this->str_ends_with($folderItemImage, ".gif")
                                    )) {
                                    // creation du dossier d'accueil
                                    $this->recursive_mkdir(FCPATH . "cache/images/" . $folderItem) ;

                                    // copie du fichier
                                    copy($fileJS, FCPATH . "cache/images/" . $folderItem . "/" . $folderItemImage);
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : copie des fichiers images *************/








        /********** charge tous les espaces **********/
        $space = array();
        $folderSpace  = FCPATH . "space/" ;
        // charge tous les fichiers de conf des menus
        if($folder = opendir($folderSpace)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $fileSpace = $folderSpace . $folderItem ;
                if(is_file($fileSpace) && $folderItem != '.' && $folderItem != '..') {
                    require_once $fileSpace ;
                }
            }
        }
        /********** END : charge tous les espaces **********/










        /************ charge tous les menus de config pour les menus ***********/
        $menuLeft = array();
        $menuHeader = array();
        $menuEssential = array();

        $folderApp = MODULEPATH ;
        // charge tous les fichiers de conf des menus
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    if (is_file($folderModule . '/config/menu.php')) {
                        require_once $folderModule . '/config/menu.php' ;
                    }
                }
            }
        }

        $folderApp = BASEPATH ;
        // charge tous les fichiers de conf des menus
        if($folder = opendir($folderApp)) {
            while(false !== ($folderItem = readdir($folder)))
            {
                $folderModule = $folderApp . $folderItem ;
                if(is_dir($folderModule) && $folderItem != '.' && $folderItem != '..') {
                    if (is_file($folderModule . '/config/menu.php')) {
                        require_once $folderModule . '/config/menu.php' ;
                    }
                }
            }
        }
        /************ END : charge tous les menus de config pour les menus ***********/







        /*************** creation du menu essential *************/
        // charges les différents menus
        $data["menuEssential"] = array();


        // calcul le numero ordre le plus élevé
        $maxOrder = -1 ;
        foreach($menuEssential as $menuItem) {
            if (isset($menuItem["order"])) {
                if ($menuItem["order"] > $maxOrder) {
                    $maxOrder = $menuItem["order"];
                }
            }
        }

        if ($maxOrder >= 0) {
            for($i_element_menu = 0 ; $i_element_menu <= $maxOrder ; $i_element_menu++) {
                foreach ($menuEssential as $menuItem) {
                    if (isset($menuItem["order"])) {
                        if ($menuItem["order"] == $i_element_menu) {
                            $data["menuEssential"][] = $menuItem;
                        }
                    }
                }
            }
        }
        /*************** END : creation du menu gauche *************/







        /*************** creation du menu gauche *************/
        // charges les différents menus
        $data["menuLeft"] = array();
        foreach ($space as $space_item) {
            $dataMenu = array() ;
            $dataMenu["info"] = $space_item ;
            $dataMenu["item"] = array() ;

            // calcul le numero ordre le plus élevé
            $maxOrder = -1 ;
            foreach($menuLeft as $menuLeftItem) {
                if (isset($menuLeftItem["space"]) && isset($menuLeftItem["order"])) {
                    if ($menuLeftItem["space"] == $space_item["id"] && $menuLeftItem["order"] > $maxOrder) {
                        $maxOrder = $menuLeftItem["order"];
                    }
                }
            }

            if ($maxOrder >= 0) {
                for($i = 0 ; $i <= $maxOrder ; $i++) {
                    foreach ($menuLeft as $menuLeftItem) {
                        if (isset($menuLeftItem["space"]) && isset($menuLeftItem["order"])) {
                            if ($menuLeftItem["space"] == $space_item["id"] && $menuLeftItem["order"] == $i) {
                                $dataMenu["item"][] = $menuLeftItem;
                            }
                        }
                    }
                }
            }

            $data["menuLeft"][] = $dataMenu;
        }
        /*************** END : creation du menu gauche *************/




        /*************** creation du menu Header *************/
        // charges les différents menus
        $data["menuTopCol1"] = array();
        $data["menuTopCol2"] = array();

        for ($col = 1 ; $col <= 2 ; $col++) {

            // calcul le numero ordre le plus élevé
            $maxOrderCol = -1;
            foreach ($space as $space_item) {
                if (isset($space_item["menu-header"]["col"]) && isset($space_item["menu-header"]["order"])) {
                    if ($space_item["menu-header"]["col"] == $col && $space_item["menu-header"]["order"] > $maxOrderCol) {
                        $maxOrderCol = $space_item["menu-header"]["order"];
                    }
                }
            }

            if ($maxOrderCol >= 0) {
                for ($i_order_space = 0; $i_order_space <= $maxOrderCol; $i_order_space++) {
                    foreach ($space as $space_item) {
                        if (isset($space_item["menu-header"]["col"]) && isset($space_item["menu-header"]["order"])) {
                            if ($i_order_space == $space_item["menu-header"]["order"] && $space_item["menu-header"]["col"] == $col) {


                                $dataMenu = array();
                                $dataMenu["info"] = $space_item;
                                $dataMenu["item"] = array();

                                // calcul le numero ordre le plus élevé
                                $maxOrder = -1;
                                foreach ($menuHeader as $menuHeaderItem) {
                                    if (isset($menuHeaderItem["space"]) && isset($menuHeaderItem["order"])) {
                                        if ($menuHeaderItem["space"] == $space_item["id"] && $menuHeaderItem["order"] > $maxOrder) {
                                            $maxOrder = $menuHeaderItem["order"];
                                        }
                                    }
                                }

                                if ($maxOrder >= 0) {
                                    for ($i = 0; $i <= $maxOrder; $i++) {
                                        foreach ($menuHeader as $menuHeaderItem) {
                                            if (isset($menuHeaderItem["space"]) && isset($menuHeaderItem["order"])) {
                                                if ($menuHeaderItem["space"] == $space_item["id"] && $menuHeaderItem["order"] == $i) {
                                                    $dataMenu["item"][] = $menuHeaderItem;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (count($dataMenu["item"]) > 0) {
                                    if ($col == 1) {
                                        $data["menuTopCol1"][] = $dataMenu;
                                    } elseif ($col == 2) {
                                        $data["menuTopCol2"][] = $dataMenu;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /*************** END : creation du menu Header *************/



        $data["form"] = true ;

        return $data ;
    }






    private function getContentFolderJs($folderAngularJs) {
        $valRetour = "";

        if (is_dir($folderAngularJs)) {
            $folderAngularJs .= "/" ;
            if($folderJS = opendir($folderAngularJs)) {
                while (false !== ($folderItemJS = readdir($folderJS))) {
                    $fileJS = $folderAngularJs . $folderItemJS;
                    if (is_file($fileJS) && $folderItemJS != '.' && $folderItemJS != '..' && $this->str_ends_with($folderItemJS, ".js")) {
                        $valRetour .= file_get_contents($fileJS) ;
                        $valRetour .= "\n";
                    } elseif (is_dir($fileJS) && $folderItemJS != '.' && $folderItemJS != '..') {
                        $valRetour .= $this->getContentFolderJs($fileJS);
                    }
                }
            }
        }

        return $valRetour ;
    }


    private function str_ends_with($haystack, $needle)
    {
        return strrpos($haystack, $needle) + strlen($needle) === strlen($haystack);
    }




    private function recursive_mkdir($dirName){
        if (!is_dir($dirName)) {
            mkdir($dirName, 0777, true);
        }
    }
}


?>
